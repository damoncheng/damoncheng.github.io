<html>

<head>
    <style type="text/css">
        //.operate {padding-left:30px;}
        div {margin: 10px}
    </style>
    <script type="text/javascript" src="${STATIC_URL}/custom/js/jquery.js" charset="utf-8"></script>
    <script>
        $(function() {
            
            $(".file_row").click(function(){
                $(".file_row").css("background-color", "white")
                $(".file_row").removeAttr("id")
                $(this).attr("id", "selected")
                $(this).css("background-color", "yellow")
                $("#modify_input").val($(this).children("td").first().text())
                var x = $("#modify_input").get(0)
                x.size = (x.value.length>4?x.value.length:4)
            }); 
            
            $(".file_row:first").css("background-color", "yellow")
            $(".file_row:first").attr("id", "selected")
            $("#modify_input").val($(".file_row:first").children("td").first().text())
            var x = $("#modify_input").get(0)
            x.size = (x.value.length>4?x.value.length:4)
        });
        
        function jsonConcat(o1, o2)
        {
            for (var key in o2){
                o1[key] = o2[key];
            }
            return o1;
        }
        
        function rdm_url(class_name, method, params){
            var basics = {"t_id": ${t_id}, "product_id" : "${product_id}" ,"version_id": "${recv_version or ''}", "class_name" : class_name,  "method" : method, "rdm_id" : "${rdm_id}", "job_id" : "${job_id}" };
            params["selected_file_path"] = $("#selected").text()
            params["modify_file_path"] =  $("#modify_input").val()
            basics = jsonConcat(basics, params)
            var url_params = Object.keys(basics).map(function(key){ return encodeURIComponent(key) + "=" + encodeURIComponent(basics[key]); }).join("&");
            var url = "${reverse('build_get_template_obj')}?".concat(url_params)
            window.location.href = url
        }
        
        function debug(){
            console.log($("#add_input").val())
        }
        
        function uploadAndSubmit() { 
            var form = document.forms["uploadFile"];
            
          try {
                if (!XMLHttpRequest.prototype.sendAsBinary) {
                    XMLHttpRequest.prototype.sendAsBinary = function(datastr) {
                      function byteValue(x) {
                        return x.charCodeAt(0) & 0xff;
                        }
                        var ords = Array.prototype.map.call(datastr, byteValue);
                        var ui8a = new Uint8Array(ords);

                      // Not pretty: Chrome 22 deprecated sending ArrayBuffer, moving instead
                      // to sending ArrayBufferView.  Sadly, no proper way to detect this
                      // functionality has been discovered.  Happily, Chrome 22 also introduced
                      // the base ArrayBufferView class, not present in Chrome 21.
                      if ('ArrayBufferView' in window)
                      {
                        console.log("here1")
                        this.send(ui8a);
                      }
                      else
                      {
                        console.log("here2")
                        this.send(ui8a.buffer);
                      }
                    };
                }
            } catch (e) {}

                
            if (form["file"].files.length > 0) { 
                // 寻找表单域中的 <input type="file" ... /> 标签
                var file = form["file"].files[0]; 
                // try sending 
                var reader = new FileReader(); 

                reader.onloadstart = function() { 
                    // 这个事件在读取开始时触发
                    console.log("onloadstart"); 
                    document.getElementById("bytesTotal").textContent = file.size; 
                } 
        
                reader.onprogress = function(p) { 
                    // 这个事件在读取进行中定时触发
                    console.log("onprogress"); 
                    document.getElementById("bytesRead").textContent = p.loaded; 
                } 

                reader.onload = function() { 
                    // 这个事件在读取成功结束后触发
                    console.log("load complete"); 
                } 

                reader.onloadend = function() { 
                    // 这个事件在读取结束后，无论成功或者失败都会触发
                    if (reader.error) { 
                        console.log(reader.error); 
                    } else { 
                        document.getElementById("bytesRead").textContent = file.size;

                        
                        // 构造 XMLHttpRequest 对象，发送文件 Binary 数据
                        var xhr = new XMLHttpRequest(); 
                        xhr.open(/* method */ "POST", 
                        /* target url */ "${reverse('build_upload_file')}?fileName=" + file.name 
                        /*, async, default to true */); 
                        //var sBoundary = "---------------------------" + Date.now().toString(16);
                        //xhr.setRequestHeader("Content-Type", "multipart\/form-data; boundary=" + sBoundary);
                        //xhr.overrideMimeType("application/octet-stream"); 
                        //console.log(reader.result)
                        xhr.sendAsBinary(reader.result); 
                        xhr.onreadystatechange = function() { 
                            if (xhr.readyState == 4) { 
                                if (xhr.status == 200) { 
                                    console.log("upload complete"); 
                                    console.log("response: " + xhr.responseText); 
                                } 
                            } 
                        } 
                        
                        
                        
                        
                    } 
                } 

                reader.readAsBinaryString(file); 
            } else { 
                alert ("Please choose a file."); 
            } 
        }
        
    </script>
</head>

<body>
    <div>
        <p>
            <form name="uploadFile" method="post" enctype="multipart/form-data"    action="javascript: uploadAndSubmit();">
                <p>上传文件: <input id="add_input" type="file" name="file"/></p> 
                <p><input type="submit" value="Submit" /></p>
                <!-- <a href="#" onclick="debug()">上传</a>-->
            </form>
            <div>Progessing (in Bytes): <span id="bytesRead"> 
            </span> / <span id="bytesTotal"></span> 
            </div>
        </p>
    <div>
        <input id="modify_input" type="text" style=""></input>
        <!-- <button>删除</button> -->
        <a href="#" onclick="rdm_url('Involve', 'rename_file', {})">重命名</a>
    </div>
    <table border="1" style="text-align:left">
        <!-- 
        <tr>
            <th >文件名</th>
            <th class="operate">操作</th> 
        </tr>
        -->
        %for file_name in file_list:

            <tr class="file_row">
                <td>${file_name}</td>
                <!-- <td class="operate">-</td> -->
            </tr>

        %endfor

    </table>

</body>
    
</html>
