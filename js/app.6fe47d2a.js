(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["app"],{0:function(n,e,t){n.exports=t("2f39")},"034f":function(n,e,t){"use strict";var a=t("fb1c"),o=t.n(a);o.a},"1e5d":function(n,e,t){},"2f39":function(n,e,t){"use strict";t.r(e);t("ac6a"),t("4a91"),t("a114"),t("d14b"),t("1e5d"),t("7e6d");var a=t("2b0e"),o=t("e84f"),r=t("7051"),i=t("2040"),s=t("cf12"),c=t("46a9"),l=t("32a1"),u=t("f30c"),p=t("ce67"),d=t("482e"),h=t("52b5"),f=t("1180"),b=t("1e55"),m=t("506f"),v=t("b8d9"),w=t("7d43"),y=t("c563"),g=t("db7b"),j=t("c081"),O=t("9413"),N=t("6aa0"),S=t("53fc"),x=t("1526"),T=t("133b");a["default"].use(o["a"],{config:{},components:{QLayout:r["a"],QLayoutHeader:i["a"],QLayoutDrawer:s["a"],QPageContainer:c["a"],QPage:l["a"],QToolbar:u["a"],QToolbarTitle:p["a"],QBtn:d["a"],QIcon:h["a"],QList:f["a"],QListHeader:b["a"],QItem:m["a"],QItemMain:v["a"],QItemSide:w["a"],QTabs:y["a"],QTab:g["a"],QTabPane:j["a"],QRouteTab:O["a"],QFab:N["a"],QFabAction:S["a"]},directives:{Ripple:x["a"]},plugins:{Notify:T["a"]}});var k=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{attrs:{id:"q-app"}},[t("router-view")],1)},M=[];k._withStripped=!0;var V={name:"App"},L=V,J=(t("034f"),t("2877")),P=Object(J["a"])(L,k,M,!1,null,null,null);P.options.__file="App.vue";var Q=P.exports,I=t("2f62");t("6762"),t("2fdb"),t("28a5"),t("cadf");console.log("markdown state");var F=t("4521"),_={},A={};F.keys().forEach(function(n){var e=n.split("/");e.shift(),A[e.join("/")]=F(n).default||F(n);var t=null,a=null,o=null;3==e.length&&(t=e[0],a=e[1],o=e[2],!t||t in _||(_[t]={}),!a||a in _[t]||(_[t][a]=[]),o&&!_[t][a].includes(o)&&_[t][a].push(o))}),console.log(_),console.log(A);var H={obj:_,content:A,readme:"Readme.md"},B=t("a7c1"),C=t("589c"),E=t("b39d"),W={namespaced:!0,state:H,getters:B,mutations:C,actions:E};a["default"].use(I["a"]);var D=function(){var n=new I["a"].Store({modules:{markdown:W}});return n},G=t("8c4f"),R=[{path:"/",component:function(){return t.e("5f1e856d").then(t.bind(null,"2710"))},children:[{path:"domain/:domain",component:function(){return Promise.all([t.e("c8a3b1c4"),t.e("143e7ce6")]).then(t.bind(null,"37ab"))}},{path:"domain/:domain/module/:module",component:function(){return Promise.all([t.e("c8a3b1c4"),t.e("6953d370")]).then(t.bind(null,"0e8a"))}},{path:"domain/:domain/module/:module/section/:section",component:function(){return Promise.all([t.e("c8a3b1c4"),t.e("607828fb")]).then(t.bind(null,"cdb4"))}}]}];R.push({path:"*",component:function(){return t.e("4b47640d").then(t.bind(null,"e51e"))}});var U=R;a["default"].use(G["a"]);var q=function(){var n=new G["a"]({scrollBehavior:function(){return{y:0}},routes:U,mode:"hash",base:""});return n},z=function(){var n="function"===typeof D?D():D,e="function"===typeof q?q({store:n}):q;n.$router=e;var t={el:"#q-app",router:e,store:n,render:function(n){return n(Q)}};return{app:t,store:n,router:e}},$=t("a925"),Y={failed:"Action failed",success:"Action was successful"},K={"en-us":Y},X=function(n){var e=n.app,t=n.Vue;t.use($["a"]),e.i18n=new $["a"]({locale:"en-us",fallbackLocale:"en-us",messages:K})},Z=t("bc3a"),nn=t.n(Z),en=function(n){var e=n.Vue;e.prototype.$axios=nn.a},tn=(t("5c96"),t("0fae"),t("be35"),function(n){n.Vue}),an=z(),on=an.app,rn=an.store,sn=an.router;[X,en,tn].forEach(function(n){n({app:on,router:sn,store:rn,Vue:a["default"],ssrContext:null})}),new a["default"](on)},4521:function(n,e,t){var a={"./docker/Readme.md":"cdb7","./docker/k8s/Readme.md":"c65c","./docker/k8s/etcd.md":"e358","./web/Readme.md":"bcd6","./web/js/Readme.md":"56df","./web/js/basic.md":"cec0"};function o(n){var e=r(n);return t(e)}function r(n){var e=a[n];if(!(e+1)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return e}o.keys=function(){return Object.keys(a)},o.resolve=r,n.exports=o,o.id="4521"},"56df":function(n,e,t){"use strict";t.r(e),e["default"]="## javascript \n\n### [原型, this\b作用域, 基础数据类型, 控制语句](/#/domain/web/module/js/section/basic)\n\n\n\n"},"589c":function(n,e){},"7e6d":function(n,e,t){},a7c1:function(n,e){},b39d:function(n,e){},bcd6:function(n,e,t){"use strict";t.r(e),e["default"]="## web简介\n\n[MSDN web文档](https://developer.mozilla.org/zh-CN/docs/Web)\n\n### BOM\n\n[W3C BOM介绍](https://www.w3school.com.cn/js/js_window.asp)\n\n浏览器对象模型（Browser Object Model (BOM)）允许 JavaScript 与浏览器对话。\n\n不存在浏览器对象模型（BOM）的官方标准。\n\n现代的浏览器已经（几乎）实现了 JavaScript 交互相同的方法和属性，因此它经常作为 BOM 的方法和属性被提到\n\n### DOM\n\n[W3C DOM介绍](https://www.w3school.com.cn/js/js_htmldom.asp)\n\n当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。\n\nHTML DOM 模型被结构化为对象树\n\n通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：\n\n- JavaScript 能改变页面中的所有 HTML 元素\n\n- JavaScript 能改变页面中的所有 HTML 属性\n\n- JavaScript 能改变页面中的所有 CSS 样式\n\n- JavaScript 能删除已有的 HTML 元素和属性\n\n- JavaScript 能添加新的 HTML 元素和属性\n\n- JavaScript 能对页面中所有已有的 HTML 事件作出反应\n\n- JavaScript 能在页面中创建新的 HTML 事件\n\n\n### HTML\n\n### CSS\n\n### javascript\n\n### HTTP\n\n"},be35:function(n,e,t){},c65c:function(n,e,t){"use strict";t.r(e),e["default"]=""},cdb7:function(n,e,t){"use strict";t.r(e),e["default"]=""},cec0:function(n,e,t){"use strict";t.r(e),e["default"]="## 基础知识\n\n### prototype chain\n\n![js原型链](./images/js_prototype_chain.png)\n\n- 原型获取,修改相关函数\n\n    Object.getPrototypeOf() and Object.setPrototypeOf()\n\n- Inheriting \"methods\"\n  \n  When an inherited function is executed, the value of **this** points to the inheriting object, not to the prototype object where the function is an own property.\n\n        var o = {\n        a: 2,\n        m: function() {\n            return this.a + 1;\n        }\n        };\n\n        console.log(o.m()); // 3\n        // When calling o.m in this case, 'this' refers to o\n\n        var p = Object.create(o);\n        // p is an object that inherits from o\n\n        p.a = 4; // creates a property 'a' on p\n        console.log(p.m()); // 5\n        // when p.m is called, 'this' refers to p.\n        // So when p inherits the function m of o, \n        // 'this.a' means p.a, the property 'a' of p\n\n- Different ways to create objects and the resulting prototype chain\n\n        var o = {a: 1};\n\n        // o ---\x3e Object.prototype ---\x3e null\n\n        var b = ['yo', 'whadup', '?'];\n\n        // b ---\x3e Array.prototype ---\x3e Object.prototype ---\x3e null\n\n        function f() {\n        return 2;\n        }\n\n        // f ---\x3e Function.prototype ---\x3e Object.prototype ---\x3e null\n\n- 对象创建\n\n    - With a constructor\n\n        A \"constructor\" in JavaScript is \"just\" a function that happens to be called with the new operator.\n\n            function Graph() {\n                this.vertices = [];\n                this.edges = [];\n            }\n\n            Graph.prototype = {\n                addVertex: function(v) {\n                    this.vertices.push(v);\n                }\n            };\n\n            var g = new Graph();\n            // g is an object with own properties 'vertices' and 'edges'.\n            // g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed\n\n    - With Object.create\n\n        ECMAScript 5 introduced a new method: Object.create(). Calling this method creates a new object. The prototype of this object is the first argument of the function:\n\n            var a = {a: 1}; \n            // a ---\x3e Object.prototype ---\x3e null\n\n            var b = Object.create(a);\n            // b ---\x3e a ---\x3e Object.prototype ---\x3e null\n            console.log(b.a); // 1 (inherited)\n\n            var c = Object.create(b);\n            // c ---\x3e b ---\x3e a ---\x3e Object.prototype ---\x3e null\n\n            var d = Object.create(null);\n            // d ---\x3e null\n            console.log(d.hasOwnProperty); \n            // undefined, because d doesn't inherit from Object.prototype\n\n    - delete Operator with Object.create and new operator\n\n            var a = {a: 1};\n\n            var b = Object.create(a); \n\n            console.log(a.a); // print 1 \n            console.log(b.a); // print 1\n            b.a=5;\n            console.log(a.a); // print 1\n            console.log(b.a); // print 5\n            delete b.a;\n            console.log(a.a); // print 1\n            console.log(b.a); // print 1(b.a value 5 is deleted but it showing value from its prototype chain)\n            delete a.a;\n            console.log(a.a); // print undefined\n            console.log(b.a); // print undefined\n\n- hasOwnProperty检查是否是对象自身属性, 而不是原型属性\n\n        console.log(g.hasOwnProperty('vertices'));\n        // true\n\n        console.log(g.hasOwnProperty('nope'));\n        // false\n\n        console.log(g.hasOwnProperty('addVertex'));\n        // false\n\n        console.log(g.__proto__.hasOwnProperty('addVertex'));\n        // true\n\n- prototype and Object.getPrototypeOf\n\n    var a1 = new A(); var a2 = new A()\n\n    Object.getPrototypeOf(a1).doSomething == Object.getPrototypeOf(a2).doSomething == A.prototype.doSomething\n\n    when you call\n\n        var o = new Foo();\n\n    JavaScript actually just does\n\n        var o = new Object();\n        o.[[Prototype]] = Foo.prototype;\n        Foo.call(o); \n\n    /* \n        上述代码非常关键， 尤其最后一行会严重影响Foo函数中this的作用域，\n        下面对js this\b玩法做一个总结\n    */   \n\n- JavaScript this 关键词指的是它所属的对象。它拥有不同的值，具体取决于它的使用位置:\n\n- 在方法中，this 指的是所有者对象。\n\n    var person = {\n        firstName: \"Bill\",\n        lastName : \"Gates\",\n        id       : 678,\n        fullName : function() {\n            return this.firstName + \" \" + this.lastName;\n        }\n    };\n\n- 单独的情况下，this 指的是全局对象 [object Window]。\n\n    var x = this;\n\n- 在严格模式中，如果单独使用，那么 this 指的是全局对象 [object Window]：\n\n    \"use strict\";\n    var x = this;\n\n- 函数中的 this（默认）\n    \n    在 JavaScript 函数中，函数的拥有者默认绑定 this。\n\n    因此，在函数中，this 指的是全局对象 [object Window]\n\n        function myFunction() {\n        return this;\n        }\n\n- 函数中的 this（严格模式）\n\n    JavaScript 严格模式不允许默认绑定。\n\n    因此，在函数中使用时，在严格模式下，this 是未定义的（undefined）。\n\n        \"use strict\";\n        function myFunction() {\n        return this;\n        }\n\n- 事件处理程序中的 this\n\n    在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素：\n\n        <button onclick=\"this.style.display='none'\">\n            点击来删除我！\n        </button>\n\n- 对象方法绑定\n\n    在此例中，this 是 person 对象（person 对象是该函数的“拥有者”）：\n\n        var person = {\n            firstName  : \"Bill\",\n            lastName   : \"Gates\",\n            id         : 678,\n            myFunction : function() {\n                return this;\n            }\n        };\n\n- 显式函数绑定\n\n    call() 和 apply() 方法是预定义的 JavaScript 方法。\n\n    它们都可以用于将另一个对象作为参数调用对象方法。\n\n    您可以在本教程后面阅读有关 call() 和 apply() 的更多内容。\n\n    在下面的例子中，当使用 person2 作为参数调用 person1.fullName 时，this 将引用 person2，即使它是 person1 的方法：\n\n\n        var person1 = {\n        fullName: function() {\n            return this.firstName + \" \" + this.lastName;\n        }\n        }\n        var person2 = {\n        firstName:\"Bill\",\n        lastName: \"Gates\",\n        }\n        person1.fullName.call(person2);  // 会返回 \"Bill Gates\"\n\n### 基础数据类型\n\n- Number\n\n    Numbers in JavaScript are **\"double-precision 64-bit format IEEE 754 values\"**, according to the spec —  There's no such thing as an integer in JavaScript (except BigInt), so you have to be a little careful. See this example:\n\n        console.log(3 / 2);             // 1.5, not 1\n        console.log(Math.floor(3 / 2)); // 1\n\n        0.1 + 0.2 == 0.30000000000000004;\n\n        parseInt('123', 10); // 123\n\n        parseInt('010');  //  8\n        parseInt('0x10'); // 16\n\n        parseInt('11', 2); // 3\n\n        parseInt('hello', 10); // NaN(\"Not a Number\")\n\n        NaN + 5; // NaN\n\n        isNaN(NaN); // true\n\n        1 / 0; //  Infinity\n        -1 / 0; // -Infinity\n\n        isFinite(1 / 0); // false\n        isFinite(-Infinity); // false\n        isFinite(NaN); // false\n\n- String\n\n    Strings in JavaScript are sequences of Unicode characters. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are sequences of UTF-16 code units; each code unit is represented by a 16-bit number. Each Unicode character is represented by either 1 or 2 code units.\n\n        'hello'.length; // 5\n\n        'hello'.charAt(0); // \"h\"\n        'hello, world'.replace('world', 'mars'); // \"hello, mars\"\n        'hello'.toUpperCase(); // \"HELLO\"\n\n- Boolean\n\n    - false, 0, empty strings (\"\"), NaN, null, and undefined all become false.\n\n    - All other values become true.\n\n- Symbol(new in ES2015)\n- Object\n    - Function\n    - Array\n    - Date\n    - RegExp\n- null\n\n    indicates a deliberate non-value (and is only accessible through the null keyword), \n\n- undefined\n\n    indicates an uninitialized variable \n\n\n### Variables\n\n- let : allows you to declare **block-level** variables. The declared variable is available from the block it is enclosed in\n\n        let a;\n        let name = 'Simon';\n\n  - The following is an example of scope with a variable declared with let:\n\n        // myLetVariable is *not* visible out here\n\n        for (let myLetVariable = 0; myLetVariable < 5; myLetVariable++) {\n        // myLetVariable is only visible in here\n        }\n\n        // myLetVariable is *not* visible out here\n\n- const : allows you to declare variables whose values are never intended to change. The variable is available from the **block** it is declared in.\n\n- var : A variable declared with the var keyword is available from the **function** it is declared in.\n\n        // myVarVariable *is* visible out here\n\n        for (var myVarVariable = 0; myVarVariable < 5; myVarVariable++) { \n        // myVarVariable is visible to the whole function \n        } \n\n        // myVarVariable *is* visible out here \n\n\n### Operators\n\n- numeric operators\n\n        +, -, *, / and %  \n        \n        += and -=\n        \n        ++ and -- \n\n  - The + operator also does string concatenation:\n\n      'hello' + ' world'; // \"hello world\"\n\n- Comparisons \n\n        <, >, <= and >=\n\n        123 == '123'; // true\n\n        1 == true; // true\n\n    To avoid type coercion, use the triple-equals operator:\n\n        123 === '123'; // false\n        1 === true;    // false\n\n    There are also != and !== operators.\n\n\n### Control structures\n\n- if and else\n\n        var name = 'kittens';\n        if (name == 'puppies') {\n        name += ' woof';\n        } else if (name == 'kittens') {\n        name += ' meow';\n        } else {\n        name += '!';\n        }\n        name == 'kittens meow';\n\n- while loops and do-while loops\n\n        while (true) {\n        // an infinite loop!\n        }\n\n        var input;\n        do {\n        input = get_input();\n        } while (inputIsNotValid(input));\n\n- for loop \n\n        for (var i = 0; i < 5; i++) {\n        // Will execute 5 times\n        }\n\n- for array : for...of\n\n        for (let value of array) {\n        // do something with value\n        }\n\n- for object : for...in:\n\n        for (let property in object) {\n        // do something with object property\n        }\n\n- The && and || operators use short-circuit logic,\n\n        var name = o && o.getName();\n\n        var name = cachedName || (cachedName = getName());\n\n        var allowed = (age > 18) ? 'yes' : 'no';\n\n- ternary operator \n\n        var allowed = (age > 18) ? 'yes' : 'no';\n\n\n- switch statement\n\n        switch (action) {\n            case 'draw':\n                drawIt();\n                break;\n            case 'eat':\n                eatIt();\n                break;\n            default:\n                doNothing();\n        }\n\n    - fallthrough\n\n            switch (a) {\n            case 1: // fallthrough\n            case 2:\n                eatIt();\n                break;\n            default:\n                doNothing();\n            }\n\n    - You can have expressions in both the switch part and the cases if you like\n\n        comparisons take place between the two using the === operator:\n\n            switch (1 + 3) {\n            case 2 + 2:\n                yay();\n                break;\n            default:\n                neverhappens();\n            }\n\n### Object"},e358:function(n,e,t){"use strict";t.r(e),e["default"]=""},fb1c:function(n,e,t){}},[[0,"runtime","vendor"]]]);